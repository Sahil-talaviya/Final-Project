#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Book {
    char holder[50];        //library user requesting a book hold
    char title[50];         //book title
    struct Book* NextHold;  //next user hold in queue
} Book;

typedef struct Hold{//Queue
    Book* Front;    //head pointer
    Book* Back;     //tail pointer
} Hold;


//prototypes
Hold* InitializeQueue(void);
char* DeQueue (Hold* hold);
void EnQueue (Hold* hold, char book[50], char title[50]);
Book* CreateNewHold(char book[50], char name[50]);
bool AreHolds (Hold* holds);
char* Front (Hold* hold);




int main(void){


}

//initialize queue
Hold* InitializeQueue(void){
    Hold* holds = (Hold*)malloc(sizeof(Hold));
    if(holds == NULL){
        printf("No Memory");
        exit(1);
    }

    holds->Front = NULL;
    holds->Back = NULL;
    return holds;
}


//dequeue
char* DeQueue (Hold* hold){
    if(AreHolds(hold) == false){
        printf("Queue is Empty");
        return '\0';
    }
    
    Book* holdToDeQueue = hold->Front;
    char* dataToDeQueue = holdToDeQueue->holder;
    hold->Front = holdToDeQueue->NextHold; // Resetting Head
    free(holdToDeQueue); // Free Up Existing Head
    return dataToDeQueue;
    
}


//enqueue
void EnQueue (Hold* hold, char book[50], char title[50]) {
    if(hold == NULL){
        hold = InitializeQueue();
    }

    Book* toEnqueue = CreateNewHold(book, title);
    if (AreHolds(hold)) {
        hold->Front = toEnqueue;
        hold->Back = toEnqueue;
    } 
    else {
        hold->Back->NextHold = toEnqueue;
        hold->Back = toEnqueue;
    }
}


//new node
Book* CreateNewHold(char book[50], char name[50]){
    Book* newHold = (Book*)malloc(sizeof(Book));
    if(newHold == NULL){
        printf("No Memory");
        exit(1);
    }
    char copyChar = '\0';
    for(int i; i < 50; i++){
        newHold->title[i] = book[i];
    }
    
    for(int i; i < 50; i++){
        newHold->holder[i] = name[i];
    }
    
    newHold->NextHold = NULL;
    return newHold;
}


//is empty
bool AreHolds (Hold* holds){
    return holds->Front == NULL;
}


//front
char* Front (Hold* hold){
    
    if(AreHolds(hold)){
        printf("Queue is Empty");
        return NULL;
    }
    
    return hold->Front->holder;
}
